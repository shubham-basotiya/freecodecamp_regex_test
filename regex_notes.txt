
regex.test(/string/); // regex without quotes
test return true or false;
string.match(/regex/)
match store result in array;
test() or match() opposite each other.

+ -> look for characters that occur one or more times. 
* -> matches characters that occur zero or more times.
[] -> look for group of characters.
- -> range a-z OR 0-9.
^ -> exclude/not match
For example, /[^aeiou]/gi matches all characters that are not a vowel. Note that characters like ., !, [, @, / 
and white space are matched - the negated vowel character set only excludes the vowel characters.

In an earlier challenge, you used the caret character (^) inside a character set to create a negated character 
set in the form [^thingsThatWillNotBeMatched]. 
Note :-  Outside of a character set, the caret is used to search for patterns at the beginning of strings.

i -> ignore case (uppercase/lowercase).
g -> global one or more then one
? -> lezy regular expression
$ -> You can search the end of strings using the dollar sign character $ at the end of the regex.

Example -

    let theEnding = "This is a never ending story";
    let storyRegex = /story$/;
    storyRegex.test(theEnding);
    let noEnding = "Sometimes a story will have to end";
    storyRegex.test(noEnding);

Result -   The first test call would return true, while the second would return false.

The closest character class in JavaScript to match the alphabet is \w. This shortcut is equal to [A-Za-z0-9_]. This character class matches upper and lowercase letters plus numbers. Note, this character class also includes the underscore character (_).

let longHand = /[A-Za-z0-9_]+/;
let shortHand = /\w+/;
let numbers = "42";
let varNames = "important_var";
longHand.test(numbers);
shortHand.test(numbers);
longHand.test(varNames);
shortHand.test(varNames);
All four of these test calls would return true.

These shortcut character classes are also known as shorthand character classes

You can search for the opposite of the \w with \W. Note, the opposite pattern uses a capital letter. This shortcut is the same as [^A-Za-z0-9_].

let shortHand = /\W/;
let numbers = "42%";
let sentence = "Coding!";
numbers.match(shortHand);
sentence.match(shortHand);
The first match call would return the value ["%"] and the second would return ["!"].


The shortcut to look for digit characters is \d, with a lowercase d. This is equal to the character class [0-9], which looks for a single character of any number between zero and nine.

let movieName = "2001: A Space Odyssey";
let numRegex = /\d/g; // Change this line
let result = movieName.match(numRegex).length;

result - 4